package csw.opcDemo.hcd2

import java.util.function.Consumer

import akka.actor._
import com.digitalpetri.opcua.stack.core.types.builtin.DataValue
import csw.opc.server.Hcd2Namespace
import csw.services.kvs.{TelemetryService, StateVariableStore, KvsSettings}
import csw.util.cfg.Configurations.StateVariable.CurrentState
import csw.util.cfg.Configurations._
import csw.util.cfg.Events.StatusEvent
import csw.util.cfg.StandardKeys
import scala.concurrent.duration._

import scala.language.postfixOps

object Hcd2Worker {
  def props(prefix: String): Props = Props(classOf[Hcd2Worker], prefix)

  // Message used to try/retry to connect to the OPC server
  case object TryOpcConnection

}

/**
 * An actor that does the work of matching a configuration
 */
class Hcd2Worker(prefix: String) extends Actor with ActorLogging {
  import context.dispatcher
  import Hcd2Worker._

  log.info(s"Started worker for $prefix")

  val settings = KvsSettings(context.system)
  val svs = StateVariableStore(settings)
  val telemetryService = TelemetryService(settings)
  val name = prefix.split('.').last
  val choices = if (name == "filter") Hcd2Namespace.FILTERS else Hcd2Namespace.DISPERSERS
  val key = if (prefix == StandardKeys.filterPrefix) StandardKeys.filter else StandardKeys.disperser

  // We can't do anything until the OPC UA server is available
  context.become(waitingForOpcServer)
  tryOpcConnection()

  override def receive: Receive = Actor.emptyBehavior

  // State while waiting for a connection to the OPC UA server
  def waitingForOpcServer: Receive = {
    case TryOpcConnection ⇒ tryOpcConnection()
    case s: SetupConfig   ⇒ log.error("Not connected to OPC server")
    case x                ⇒ log.error(s"Unexpected message $x")
  }

  // State while connected to the OPC server
  def connected(opcClient: Hcd2OpcUaClient): Receive = {
    case s: SetupConfig ⇒ submit(s, opcClient)
    case x              ⇒ log.error(s"Unexpected message $x")
  }

  private def tryOpcConnection(): Unit = {
    try {
      val opcClient = new Hcd2OpcUaClient()

      // Subscribe to changes in the filter or disperser opcua variable and then update the state variable
      opcClient.subscribe(name, new Consumer[DataValue] {
        override def accept(v: DataValue): Unit = {
          val s = v.getValue.getValue.toString
          log.info(s"HCD subscriber: value for $name received: $s")

          // Normally we would react to the OPC variable being set, but in order
          // to simulate a delay, this is done below when the telemetry indicates it is done
          //      svs.set(CurrentState(prefix).set(key, s))
        }
      })

      // Subscribe to changes in the opcua filterPos or disperserPos opcua variable and then set the telemetry value
      // (These values are generated by the HCD2 OPC UA server to simulate a wheel turning through different values)
      opcClient.subscribe(s"${name}Pos", new Consumer[DataValue] {
        override def accept(v: DataValue): Unit = {
          val pos = v.getValue.getValue.asInstanceOf[Int]
          val choice = choices(pos)
          log.info(s"HCD subscriber: value for ${name}Pos received: $choice")

          // Note: Could alternatively use a different key or data type for the telemetry,
          // here we use the filter or disperser keys
          telemetryService.set(StatusEvent(prefix).set(key, choice))

          // Doing this here to simulate the delay
          svs.set(CurrentState(prefix).set(key, choice))
        }
      })

      log.info(s"$name: Connected to OPC server")
      context.become(connected(opcClient))
    } catch {
      case ex: Exception ⇒
        // Retry the connection in a second
        log.warning(s"$name: Failed to connect to OPC server (${ex.getMessage}). Will retry in 1 sec.")
        context.system.scheduler.scheduleOnce(1.second, self, TryOpcConnection)
    }
  }

  /**
   * Called when a configuration is submitted
   */
  def submit(setupConfig: SetupConfig, opcClient: Hcd2OpcUaClient): Unit = {
    setupConfig.get(key).foreach { value ⇒
      opcClient.setValue(name, value)
    }
  }
}

